[{"F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\index.js":"1","F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\App.js":"2","F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\reportWebVitals.js":"3","F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\components\\CurrentLocation\\CurrentLocation.js":"4","F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\components\\DisplayVehicles\\DisplayVehicles.js":"5","F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\components\\VehiclePopup\\VehiclePopup.js":"6"},{"size":517,"mtime":1612264631879,"results":"7","hashOfConfig":"8"},{"size":3797,"mtime":1612441953065,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1612264631880,"results":"10","hashOfConfig":"8"},{"size":417,"mtime":1612436458325,"results":"11","hashOfConfig":"8"},{"size":580,"mtime":1612436482544,"results":"12","hashOfConfig":"8"},{"size":452,"mtime":1612441720810,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"13mkjwn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\index.js",[],["28","29"],"F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\App.js",["30","31","32","33"],"import './App.css';\r\nimport ReactMapGL, {Marker, NavigationControl, Popup} from 'react-map-gl';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Geocoder from 'react-native-geocoding';\r\nimport distance from 'google-distance-matrix';\r\nimport CurrentLocation from './components/CurrentLocation/CurrentLocation';\r\nimport DisplayVehicles from './components/DisplayVehicles/DisplayVehicles';\r\nimport VehiclePopup from './components/VehiclePopup/VehiclePopup'\r\n\r\nfunction App() {\r\n  const [cordinates, setCordinates]= useState([]);\r\n  const [vehicle, selectedVehicle]= useState(null);\r\n  const [location, setLocation]= useState(null);\r\n\r\n  //My current location cordinates\r\n  var origin = {\r\n    latitude : -41.29391,\r\n    longitude : 174.763401\r\n  }\r\n\r\n  const MAPBOX_API_TOKEN= process.env.REACT_APP_MAPBOX_API;\r\n  const GOOGLE_API_TOKEN= process.env.REACT_APP_GOOGLE_API;\r\n\r\n\r\n  const vehicleOnButtonClick = (eachVehicle) => {\r\n      selectedVehicle(eachVehicle);\r\n      setLocation(null);\r\n      locationAddress(eachVehicle); \r\n  }\r\n\r\n//For measure distance between cordinates\r\n\r\n// var origins = ['-41.275522,174.763401'];\r\n// var destinations = ['-41.329505,174.812767', '-41.294412,174.774179'];\r\n// distance.key(GOOGLE_API_TOKEN);\r\n// distance.units('metric');\r\n\r\n// distance.matrix(origins, destinations, function (err, distances) {\r\n//     if (err) {\r\n//         return console.log(err);\r\n//     }\r\n//     if(!distances) {\r\n//         return console.log('no distances');\r\n//     }\r\n//     if (distances.status == 'OK') {\r\n//       console.log(\"Distance is\",distances)\r\n//     }\r\n// });\r\n\r\n  const [viewport, setViewport] = useState({\r\n    width: '100vw',\r\n    height: '100vh',\r\n    longitude: origin.longitude,\r\n    latitude: origin.latitude,\r\n    zoom:13\r\n  });\r\n\r\n  const mapClick= (e) =>{\r\n  if(e.target.localName !== 'img'){\r\n    selectedVehicle(null);\r\n    setLocation(null);\r\n  }\r\n}\r\n\r\nconst onVehiclePopupClose= () => {\r\n  selectedVehicle(null);\r\n  setLocation(null);\r\n}\r\n\r\n//Retrieving the location of vehicle using cordinates\r\nconst locationAddress = ({longitude, latitude}) => {\r\n  Geocoder.init(GOOGLE_API_TOKEN);\r\n  Geocoder.from(latitude, longitude)\r\n    .then(json => {\r\n            var addressComponent = json.results[0].formatted_address;\r\n            setLocation(addressComponent);\r\n    })\r\n    .catch(error => console.warn(error));\r\n}\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.mevo.co.nz/public/vehicles/all')\r\n    .then(response => response.json())\r\n    .then (result => setCordinates(result));  \r\n  }, [])\r\n\r\n  const vehicleCordinates=cordinates.map(vehicle => vehicle.position);\r\n \r\n  return ( vehicleCordinates.length ?\r\n    <div className=\"App\" onClick={(e)=>{mapClick(e)}}>\r\n      <ReactMapGL {...viewport} \r\n      mapboxApiAccessToken={MAPBOX_API_TOKEN} \r\n      onViewportChange={viewport => {setViewport(viewport)}}\r\n      mapStyle={'mapbox://styles/mapbox/basic-v9'}> \r\n\r\n      <CurrentLocation longitude={origin.longitude} latitude={origin.latitude} /> \r\n\r\n      {vehicleCordinates.map(eachVehicle => {\r\n        return (\r\n          <DisplayVehicles key={Number(eachVehicle.longitude)} \r\n            longitude={Number(eachVehicle.longitude)} \r\n            latitude={Number(eachVehicle.latitude)} eachVehicle={eachVehicle} vehicleOnButtonClick={vehicleOnButtonClick} />\r\n        )\r\n      })}\r\n\r\n      {(vehicle) ? <VehiclePopup location={location} latitude={Number(vehicle.latitude)} longitude={Number(vehicle.longitude)} onVehiclePopupClose={onVehiclePopupClose} /> : null }\r\n      <NavigationControl/>\r\n      </ReactMapGL>    \r\n    </div> :\r\n    <div id=\"pageLoading\"> \r\n      <img id=\"imgLoading\" src=\"https://media.tenor.com/images/e9666fa015f403a882f069b9234995cc/tenor.gif\" width=\"300\" height=\"300\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\reportWebVitals.js",[],"F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\components\\CurrentLocation\\CurrentLocation.js",[],"F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\components\\DisplayVehicles\\DisplayVehicles.js",[],"F:\\WEB DEVELOPMENT\\MAPBOX_apps\\mevo_app\\src\\components\\VehiclePopup\\VehiclePopup.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":2,"column":21,"nodeType":"40","messageId":"41","endLine":2,"endColumn":27},{"ruleId":"38","severity":1,"message":"42","line":2,"column":48,"nodeType":"40","messageId":"41","endLine":2,"endColumn":53},{"ruleId":"38","severity":1,"message":"43","line":5,"column":8,"nodeType":"40","messageId":"41","endLine":5,"endColumn":16},{"ruleId":"44","severity":1,"message":"45","line":111,"column":7,"nodeType":"46","endLine":111,"endColumn":134},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Marker' is defined but never used.","Identifier","unusedVar","'Popup' is defined but never used.","'distance' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]