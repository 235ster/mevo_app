{"version":3,"sources":["components/CurrentLocation/CurrentLocation.js","components/DisplayVehicles/DisplayVehicles.js","components/VehiclePopup/VehiclePopup.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentLocation","longitude","latitude","id","src","alt","DisplayVehicles","eachVehicle","vehicleOnButtonClick","className","onClick","e","preventDefault","VehiclePopup","onVehiclePopupClose","location","onClose","App","useState","cordinates","setCordinates","vehicle","selectedVehicle","setLocation","origin","locationAddress","width","height","zoom","viewport","setViewport","Geocoder","init","process","from","then","json","addressComponent","results","formatted_address","catch","error","console","warn","useEffect","fetch","response","result","vehicleCordinates","map","position","length","target","localName","mapClick","mapboxApiAccessToken","onViewportChange","mapStyle","Number","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e178a512.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Marker} from 'react-map-gl';\r\nimport './CurrentLocation.css'\r\nconst CurrentLocation = ({longitude, latitude}) => {\r\n\treturn(\r\n\t\t<Marker longitude={longitude} latitude={latitude}>\r\n        \t<img id=\"currentLocation\" src=\"https://cdn3.iconfinder.com/data/icons/maps-and-navigation-7/65/68-512.png\" alt=\"My current location\"/>\r\n      \t</Marker>\r\n\t)\r\n}\r\nexport default CurrentLocation;","import {Marker} from 'react-map-gl';\r\nimport React from 'react';\r\nimport './DisplayVehicles.css';\r\n\r\nconst DisplayVehicles = ({longitude, latitude, eachVehicle, vehicleOnButtonClick}) => {\r\n  return(\r\n    <Marker longitude={longitude} latitude={latitude}>\r\n      <button className=\"btn-marker\" \r\n      onClick= {(e)=> {\r\n        e.preventDefault();\r\n        vehicleOnButtonClick(eachVehicle);\r\n      }}>\r\n        <img src=\"https://assets.mevo.co.nz/vehicles/pin-vehicle-available.png\" alt=\"Vehicle marker\"/>\r\n      </button>\r\n    </Marker>\r\n  )\r\n}\r\nexport default DisplayVehicles;","import {Popup} from 'react-map-gl';\r\nimport React from 'react';\r\nimport './VehiclePopup.css'\r\n\r\nconst VehiclePopup = ({latitude, longitude, onVehiclePopupClose, location}) => {\r\n\treturn (\r\n        <Popup latitude={latitude} longitude={longitude} \r\n        onClose={(e)=>{\r\n        \tonVehiclePopupClose();          \r\n        }}>\r\n          <div>\r\n            <h4>{location}</h4>\r\n          </div>\r\n        </Popup>\r\n\t)\r\n\r\n}\r\nexport default VehiclePopup;","import './App.css';\r\nimport ReactMapGL, {Marker, NavigationControl, Popup} from 'react-map-gl';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Geocoder from 'react-native-geocoding';\r\nimport distance from 'google-distance-matrix';\r\nimport CurrentLocation from './components/CurrentLocation/CurrentLocation';\r\nimport DisplayVehicles from './components/DisplayVehicles/DisplayVehicles';\r\nimport VehiclePopup from './components/VehiclePopup/VehiclePopup'\r\n\r\nfunction App() {\r\n  const [cordinates, setCordinates]= useState([]);\r\n  const [vehicle, selectedVehicle]= useState(null);\r\n  const [location, setLocation]= useState(null);\r\n\r\n  //My current location cordinates\r\n  var origin = {\r\n    latitude : -41.29391,\r\n    longitude : 174.763401\r\n  }\r\n\r\n  const MAPBOX_API_TOKEN= process.env.REACT_APP_MAPBOX_API;\r\n  const GOOGLE_API_TOKEN= process.env.REACT_APP_GOOGLE_API;\r\n\r\n\r\n  const vehicleOnButtonClick = (eachVehicle) => {\r\n      selectedVehicle(eachVehicle);\r\n      setLocation(null);\r\n      locationAddress(eachVehicle); \r\n  }\r\n\r\n//For measure distance between cordinates\r\n\r\n// var origins = ['-41.275522,174.763401'];\r\n// var destinations = ['-41.329505,174.812767', '-41.294412,174.774179'];\r\n// distance.key(GOOGLE_API_TOKEN);\r\n// distance.units('metric');\r\n\r\n// distance.matrix(origins, destinations, function (err, distances) {\r\n//     if (err) {\r\n//         return console.log(err);\r\n//     }\r\n//     if(!distances) {\r\n//         return console.log('no distances');\r\n//     }\r\n//     if (distances.status == 'OK') {\r\n//       console.log(\"Distance is\",distances)\r\n//     }\r\n// });\r\n\r\n  const [viewport, setViewport] = useState({\r\n    width: '100vw',\r\n    height: '100vh',\r\n    longitude: origin.longitude,\r\n    latitude: origin.latitude,\r\n    zoom:13\r\n  });\r\n\r\n  const mapClick= (e) =>{\r\n  if(e.target.localName !== 'img'){\r\n    selectedVehicle(null);\r\n    setLocation(null);\r\n  }\r\n}\r\n\r\nconst onVehiclePopupClose= () => {\r\n  selectedVehicle(null);\r\n  setLocation(null);\r\n}\r\n\r\n//Retrieving the location of vehicle using cordinates\r\nconst locationAddress = ({longitude, latitude}) => {\r\n  Geocoder.init(GOOGLE_API_TOKEN);\r\n  Geocoder.from(latitude, longitude)\r\n    .then(json => {\r\n            var addressComponent = json.results[0].formatted_address;\r\n            setLocation(addressComponent);\r\n    })\r\n    .catch(error => console.warn(error));\r\n}\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.mevo.co.nz/public/vehicles/all')\r\n    .then(response => response.json())\r\n    .then (result => setCordinates(result));  \r\n  }, [])\r\n\r\n  const vehicleCordinates=cordinates.map(vehicle => vehicle.position);\r\n \r\n  return ( vehicleCordinates.length ?\r\n    <div className=\"App\" onClick={(e)=>{mapClick(e)}}>\r\n      <ReactMapGL {...viewport} \r\n      mapboxApiAccessToken={MAPBOX_API_TOKEN} \r\n      onViewportChange={viewport => {setViewport(viewport)}}\r\n      mapStyle={'mapbox://styles/mapbox/basic-v9'}> \r\n\r\n      <CurrentLocation longitude={origin.longitude} latitude={origin.latitude} /> \r\n\r\n      {vehicleCordinates.map(eachVehicle => {\r\n        return (\r\n          <DisplayVehicles key={Number(eachVehicle.longitude)} \r\n            longitude={Number(eachVehicle.longitude)} \r\n            latitude={Number(eachVehicle.latitude)} eachVehicle={eachVehicle} vehicleOnButtonClick={vehicleOnButtonClick} />\r\n        )\r\n      })}\r\n\r\n      {(vehicle) ? <VehiclePopup location={location} latitude={Number(vehicle.latitude)} longitude={Number(vehicle.longitude)} onVehiclePopupClose={onVehiclePopupClose} /> : null }\r\n      <NavigationControl/>\r\n      </ReactMapGL>    \r\n    </div> :\r\n    <div id=\"pageLoading\"> \r\n      <img id=\"imgLoading\" src=\"https://media.tenor.com/images/e9666fa015f403a882f069b9234995cc/tenor.gif\" width=\"300\" height=\"300\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}